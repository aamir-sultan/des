

ask() {
  while true; do
    read -p "$1 ([y]/n) " -r
    REPLY=${REPLY:-"y"}
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      return 1
    elif [[ $REPLY =~ ^[Nn]$ ]]; then
      return 0
    fi
  done
}

# Define a function for colored echo
c_echo() {
  local color="$1"
  local message="$2"
  local reset="\033[0m"  # Reset to default text color

  case "$color" in
    "red")      echo -e "\033[31m$message$reset" ;;
    "green")    echo -e "\033[32m$message$reset" ;;
    "yellow")   echo -e "\033[33m$message$reset" ;;
    "blue")     echo -e "\033[34m$message$reset" ;;
    "magenta")  echo -e "\033[35m$message$reset" ;;
    "cyan")     echo -e "\033[36m$message$reset" ;;
    *) echo "Invalid color. Usage: colored_echo <color> <message>" return 1 ;;
  esac
}

chkout_branch(){
  repo_name=$1
  branch_name=$2

echo_sep
  # Check if the source directory exists
if [[ ! -d "$repo_name" ]]; then
  echo "The $repo_name directory/repo does not exist in `pwd`"
  exit 1
else
  cd $repo_name && git checkout $branch_name && cd -
  echo "Updating $branch_name branch for $repo_name..."
  git pull
fi  
echo_sep
}

chdir_to_base(){
  echo "Changing path to $DES_PATH"
  cd $DES_PATH
}

get_br_name(){
  branch_name=$(git symbolic-ref -q HEAD)
  branch_name=${branch_name##refs/heads/}
  branch_name=${branch_name:-HEAD}
}

echo_pwd() {
echo_sep
echo "Back to `pwd`"
echo_sep
}

echo_sep() {
  c_echo "yellow" "-------------------------------------------------------------------------------"
}

echo_sep() {
  c_echo "yellow" "-------------------------------------------------------------------------------"
}

echo_banner() {
  c_echo "green" "*******************************************************************************"
  c_echo "red"   "                              $1" 
  c_echo "green" "*******************************************************************************"
}
